import requests
import sqlite3
import csv
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command

# === –í–∞—à Telegram —Ç–æ–∫–µ–Ω ===
TELEGRAM_BOT_TOKEN = "8043845844:AAGh8vYhucLpxOWJGFn4ZCUHTzVv6oUqCtw"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ ===
DB_NAME = "search_history.db"
CSV_FILE = "search_history.csv"

def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS history (
            user_id INTEGER,
            platform TEXT,
            query TEXT,
            price_from INTEGER,
            price_to INTEGER,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """)
        conn.commit()

        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        with open(CSV_FILE, mode='a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(["user_id", "platform", "query", "price_from", "price_to", "timestamp"])

def save_to_csv(data, file_name="search_history.csv"):
    try:
        with open(file_name, mode='a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            for item in data:
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                writer.writerow([str(field) for field in item])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ CSV: {e}")


def save_to_history(user_id, platform, query, price_from, price_to):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ CSV —Ñ–∞–π–ª"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        INSERT INTO history (user_id, platform, query, price_from, price_to)
        VALUES (?, ?, ?, ?, ?)
        """, (user_id, platform, query, price_from, price_to))
        conn.commit()

    # –ó–∞–ø–∏—Å—å –≤ CSV —Ñ–∞–π–ª
    with open(CSV_FILE, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow([user_id, platform, query, price_from, price_to])

def get_user_history(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        SELECT platform, query, price_from, price_to, timestamp 
        FROM history 
        WHERE user_id = ? 
        ORDER BY timestamp DESC 
        LIMIT 10
        """, (user_id,))
        history = cursor.fetchall()

    # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ CSV —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
    with open(CSV_FILE, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow(["Exported History for User ID:", user_id])
        writer.writerows(history)

    return history

# === –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
user_platform_choice = {}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ===
platform_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
platform_keyboard.add(KeyboardButton("AliExpress"), KeyboardButton("Wildberries"))

# === –ö–æ–º–∞–Ω–¥–∞ start ===
@dp.message_handler(Command("start"))
async def welcome(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=platform_keyboard
    )

# === –ö–æ–º–∞–Ω–¥–∞ history ===
@dp.message_handler(Command("history"))
async def show_history(message: Message):
    user_id = message.from_user.id
    history = get_user_history(user_id)

    if not history:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return

    reply_text = "\ud83d\udd4c *–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:*\n\n"
    for idx, (platform, query, price_from, price_to, timestamp) in enumerate(history, start=1):
        reply_text += f"{idx}. \ud83d\uded2 *{platform}* ‚Äî _{query}_ –æ—Ç {price_from} –¥–æ {price_to} —Ä—É–±. \n\ud83d\udd52 {timestamp}\n\n"

    await message.reply(reply_text, parse_mode="Markdown")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ===
@dp.message_handler(lambda message: message.text in ["AliExpress", "Wildberries"])
async def choose_platform(message: Message):
    user_platform_choice[message.from_user.id] = message.text
    await message.reply(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ {message.text}.\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–∑–∞–ø—Ä–æ—Å –æ—Ç min –¥–æ max'.\n\n"
        "–ü—Ä–∏–º–µ—Ä: `—Å—É–º–∫–∞ –æ—Ç 500 –¥–æ 1500`."
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ ===
@dp.message_handler()
async def search_products(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        platform = user_platform_choice.get(message.from_user.id)
        if not platform:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=platform_keyboard)
            return

        # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query, price_from, price_to = parse_user_input(message.text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_to_history(message.from_user.id, platform, query, price_from, price_to)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        if platform == "AliExpress":
            search_results = google_search_aliexpress(query, price_from, price_to)
        elif platform == "Wildberries":
            search_results = wildberries_search(query, price_from, price_to)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if not search_results:
            await message.reply("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω.")
            return

        reply_text = f"üîç *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ {platform}:*\n\n"
        for idx, (title, price, link) in enumerate(search_results[:10], start=1):
            reply_text += f"{idx}. [{title}]({link}) - {price}\n\n"

        await message.reply(reply_text, parse_mode="Markdown")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# === –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def parse_user_input(user_input: str):
    parts = user_input.lower().split(" –æ—Ç ")
    query = parts[0].strip()
    price_range = parts[1].split(" –¥–æ ")
    price_from = int(price_range[0].strip())
    price_to = int(price_range[1].strip())
    return query, price_from, price_to

# === –ü–æ–∏—Å–∫ –Ω–∞ AliExpress —á–µ—Ä–µ–∑ Google ===
def google_search_aliexpress(query, price_from, price_to):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ Google —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å–∞–π—Ç—É AliExpress.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ —Å–±–æ—Ä–æ–∫).
    """
    search_query = f"{query} {price_from} - {price_to} site:aliexpress.com"
    url = f"https://www.google.com/search?q={search_query}&hl=ru&gl=ru"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
    }

    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, "lxml")

    # –°–±–æ—Ä –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = []
    for item in soup.find_all('div', class_='tF2Cxc'):  # –ö–∞–∂–¥—ã–π –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
        try:
            title = item.find('h3').text  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            link = item.find('a')['href']  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ AliExpress
            if "aliexpress.com" in link and is_valid_aliexpress_link(link):
                results.append((title, link))
        except (AttributeError, TypeError):
            continue

    return results

def is_valid_aliexpress_link(link):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ AliExpress.
    –ò—Å–∫–ª—é—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–±–æ—Ä–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    invalid_keywords = ["category", "search", "wholesale", "collection", "stores"]
    if any(keyword in link for keyword in invalid_keywords):
        return False
    return "aliexpress.com/item/" in link or "aliexpress.com/i/" in link

    for item in soup.find_all('div', class_='tF2Cxc'):
        try:
            title = item.find('h3').text  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            link = item.find('a')['href']  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
            if "aliexpress.com" in link:  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ AliExpress
                results.append((title, link))
        except (AttributeError, TypeError):
            continue

    return results






# === –ü–æ–∏—Å–∫ –Ω–∞ Wildberries —á–µ—Ä–µ–∑ API ===
def wildberries_search(query, price_from, price_to):
    base_url = "https://search.wb.ru/exactmatch/ru/common/v4/search"
    params = {
        "TestGroup": "no_test",
        "TestID": "no_test",
        "appType": "1",
        "curr": "rub",
        "dest": "-1257786",
        "query": query,
        "priceU": f"{price_from * 100}-{price_to * 100}",  # –¶–µ–Ω—ã –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        "resultset": "catalog",
        "spp": "20"
    }
    headers = {"User-Agent": "Mozilla/5.0"}

    try:
        response = requests.get(base_url, params=params, headers=headers)
        response.raise_for_status()
        data = response.json()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("–û—Ç–≤–µ—Ç –æ—Ç API Wildberries:", data)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö
        products = data.get("data", {}).get("products", [])
        results = []
        for product in products:
            title = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            product_id = product.get("id")
            price = product.get("salePriceU", 0) / 100  # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —Ü–µ–Ω
            if price_from <= price <= price_to:
                link = f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"
                results.append((title, f"{price} —Ä—É–±.", link))

        return results
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wildberries API: {e}")
        return []
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []



# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ ===
async def handle_search_results(platform, query, price_from, price_to, user_id):
    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        if platform == "AliExpress":
            results = google_search_aliexpress(query, price_from, price_to)
        elif platform == "Wildberries":
            results = wildberries_search(query, price_from, price_to)
        else:
            results = []

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if not results:
            return f"–¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {platform}."

        response = f"\ud83d\udd0d *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ {platform}:*\n\n"
        for idx, (title, link) in enumerate(results[:15], start=1):
            response += f"{idx}. [{title}]({link})\n\n"
        return response
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."

# === –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ ===
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ CSV —Ñ–∞–π–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)

